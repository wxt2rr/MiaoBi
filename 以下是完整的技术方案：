以下是完整的技术方案：

1. 核心架构思想：“浏览器即IDE (集成开发环境)”
我们将整个应用构建为一个纯静态网站。用户的浏览器不仅是内容的呈现者，更是集内容创作、AI辅助、样式设计于一体的完整工作台。

完全无后端 (Serverless): 应用本身不依赖任何私有后端服务器，可以部署在 Vercel、Netlify、GitHub Pages 等任何静态托管服务上。这极大地降低了维护成本。

用户自带密钥 (Bring Your Own Key - BYOK): 这是实现纯前端和保障隐私的关键。用户在设置中填入自己的大模型（如 OpenAI）和图片生成服务的 API Key。这些密钥仅存储在用户浏览器的 localStorage 中，前端代码会直接调用官方的API，完全不经过我们的服务器。

本地优先存储 (Local-First): 所有的文章草稿、图片、用户设置都保存在浏览器的 IndexedDB 数据库中。这意味着数据加载极快，甚至可以离线使用。用户的创作内容永远不会离开自己的电脑。

2. 核心技术栈选型
分类	技术选型	选用理由
应用框架	Next.js (静态导出模式)	提供顶级的开发体验、基于文件的路由和强大的生态。我们将使用其静态网站生成（SSG）功能，以获得最佳的加载性能和SEO。
UI 组件库	shadcn/ui	基于 Tailwind CSS 和 Radix UI，设计精美、可访问性强、易于定制。完美契合我们“精致且实用”的产品设计理念。
富文本编辑器	TipTap (基于 ProseMirror)	“无头”(Headless) 的编辑器框架，意味着它只提供核心逻辑，不限制UI。这使我们能用shadcn/ui组件库从零构建完全自定义的AI交互，如斜杠命令、气泡菜单等。
状态管理	Zustand	轻量、快速、可扩展的全局状态管理库。API极其简洁，非常适合管理API密钥、当前主题、编辑器状态等全局数据，避免了 Redux 的繁琐。
本地数据库	Dexie.js	IndexedDB 的一个极简封装库。它让操作浏览器内置的强大数据库变得像操作普通数组一样简单，是实现文章草稿自动保存功能的利器。
CSS 方案	Tailwind CSS	Utility-First 的 CSS 框架，能够快速构建出现代化的界面，并且是 shadcn/ui 的基础，保证了设计系统的一致性。

导出到 Google 表格
3. 核心功能模块化设计
模块一：编辑器核心 (创作画布)
这是整个应用的灵魂。

基础搭建: 使用 TipTap 的 React 组件 (@tiptap/react) 初始化编辑器，并集成其官方的 StarterKit 扩展，以支持粗体、斜体、列表等基础功能。

自定义AI交互扩展: 这是实现产品亮点的关键。我们将编写多个自定义的 TipTap 扩展：

斜杠命令 (/) 扩展: 监听用户输入的 / 字符，触发一个由 shadcn/ui 的 Command 组件构成的命令面板，提供如 /续写、/生成图片、/总结 等快捷AI操作。
.

气泡菜单 (Bubble Menu) 扩展: 当用户选中一段文本时，会出现一个悬浮菜单。我们将使用 TipTap 的 BubbleMenu 插件构建此功能，菜单中包含“AI润色”、“改变语气”、“缩写”等上下文相关的操作。
.

续写“幽灵文本” (Ghost Text) 效果: 在执行“续写”功能时，我们将以“流式响应 (Streaming)”的方式请求LLM。随着模型逐字返回内容，我们会将这些内容以半透明的“幽灵文本”形式实时展示在编辑器中。用户只需按下 Tab 键即可接受建议，使其变为正式内容。这种即时反馈的体验非常流畅。

模块二：AI 集成层 (智能引擎)
该层负责与所有第三方AI服务进行通信。

设置面板: 提供一个独立的设置页面，让用户输入并保存他们的各种 API Key (如 OpenAI, 阿里云通义, 腾讯云混元等) 和选择默认的模型 (如 gpt-4o, qwen-max, dall-e-3)。这些信息将保存在 localStorage 中。

API 服务模块: 创建一个JS模块，封装所有API请求的逻辑。

文本生成服务: 使用浏览器原生的 fetch API 调用大模型的对话(Completion)接口。最关键的是，必须处理流式响应，以便实现上述的“幽灵文本”效果。

图片生成服务: 调用 DALL-E、Stable Diffusion 等文生图模型的API接口。API返回的通常是图片URL或Base64数据，应用会获取这些数据并将其插入到编辑器中。

JavaScript

// 示例：一个处理流式响应的 fetch 请求
async function streamChatCompletion(prompt, apiKey) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      stream: true, // 开启流式响应
    }),
  });

  const reader = response.body.getReader();
  const decoder = new TextDecoder();

  // 循环读取数据流并实时更新UI
  while (true) {
    const { done, value } = await reader.read();
    if (done) break;
    const chunk = decoder.decode(value);
    // ...处理并渲染数据块...
  }
}
模块三：主题与样式系统 (品牌标识)
CSS 变量驱动: 整个主题系统将由 CSS 变量驱动，这也是 shadcn/ui 和 Tailwind CSS 的原生工作方式。

样式编辑器: 在UI中提供一个“主题”或“样式”面板，允许用户修改这些CSS变量。

调色板: 用户可以通过颜色选择器修改 --primary (主色)、--background (背景色) 等核心颜色变量。

字体组合: 用户可以从一组精选的开源字体（如思源黑体、霞鹜文楷）中选择标题和正文的字体搭配，程序会自动更新 --font-sans 等字体变量。

实时同步: 这些CSS变量会应用在包含编辑器和预览窗口的根元素上。因此，用户在样式面板中的任何修改，都会立即、同步地反映在编辑器和右侧的预览区，实现真正的“所见即所得”。

模块四：实时预览与微信格式化输出
内容转换: TipTap 编辑器内部使用JSON格式来描述文档结构。我们需要使用 TipTap 提供的 editor.getHTML() 方法将其转换为标准的 HTML 字符串。

HTML 净化 (关键步骤): 微信公众号后台的编辑器非常“霸道”，会过滤掉大量不被支持的HTML标签和CSS样式。为了确保“一键复制”后格式不会错乱，我们必须进行“净化”处理。

方案: 使用 DOMPurify 这个强大的库，并配置一个严格的白名单，只允许微信支持的标签（如 <p>, <h1>, <img>, <strong>）和CSS属性通过。

样式内联: 所有CSS样式都必须转换为内联 style="..." 属性的形式，因为微信对 <style> 标签块的支持很差。

高保真预览: 净化后的 HTML 将被渲染在一个 <iframe> 标签中，作为右侧的实时预览窗口。使用 <iframe> 可以完美隔离预览区的样式，确保它不受应用主UI的干扰，模拟手机上的真实效果。

一键复制: “复制”按钮会将最终净化和格式化好的 HTML 字符串，通过 navigator.clipboard.write() API 写入用户的剪贴板。这样用户可以直接粘贴到微信编辑器中，保留完整的格式。

模块五：本地持久化与草稿箱
数据库设计: 使用 Dexie.js 创建一个名为 articles 的表，包含 id (主键), title (标题), content (TipTap的JSON格式内容), updatedAt (更新时间) 等字段。

自动保存机制: 监听 TipTap 编辑器的 update 事件。为了避免频繁写入数据库导致性能问题，我们会使用 “防抖” (Debounce) 技术——即在用户停止输入1-2秒后，才执行一次保存操作。

草稿箱管理: 应用的首页会从 IndexedDB 读取所有文章列表，展示给用户。用户可以点击列表项来加载、编辑或删除草稿。

模块六：图片处理与云存储配置
这个模块解决了“AI生成的图片如何保存”的核心问题。

临时图片: 当AI生成一张图片后，它首先会以 blob: 或 data:URL 的形式插入编辑器。这是一个临时链接，只在当前浏览器会话中有效。

云存储配置: 在设置面板中，用户可以配置自己的对象存储服务（如阿里云OSS、腾讯云COS、AWS S3）。需要用户提供：

Access Key 和 Secret Key

Bucket (存储桶) 名称

Region (地域)

（可选）自定义域名

前端直传: 当用户想让图片永久有效时，可以点击图片上的一个“上传”按钮。应用会调用相应云服务商的前端SDK (例如 ali-oss 的浏览器JS SDK)，直接将图片文件从浏览器上传到用户自己的存储桶中。

链接替换: 上传成功后，SDK会返回一个永久的公开访问URL。应用会自动在编辑器的内容（TipTap JSON）中找到这张图片，并将其 src 属性从临时的 blob: 链接替换为这个永久URL。至此，这张图片就成为了文章的永久组成部分。

总结
该技术方案完全基于前端技术栈，构建了一个功能强大、体验流畅且高度重视用户隐私的微信公众号创作工具。它不仅解决了用户的功能需求，更通过先进的架构设计，将数据所有权100%地交还给了用户自己。
